// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

using MessagePack;

namespace Bergmann.Shared.Networking.Resolvers
{
    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<global::System.Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(14)
            {
                { typeof((global::OpenTK.Mathematics.Vector3i, global::Bergmann.Shared.Objects.Block)), 0 },
                { typeof(global::System.Collections.Generic.IList<(global::OpenTK.Mathematics.Vector3i, global::Bergmann.Shared.Objects.Block)>), 1 },
                { typeof(int[,,]), 2 },
                { typeof(global::Bergmann.Shared.Networking.Messages.IMessage), 3 },
                { typeof(global::Bergmann.Shared.Networking.ClientMessageBox), 4 },
                { typeof(global::Bergmann.Shared.Networking.Messages.BlockDestructionMessage), 5 },
                { typeof(global::Bergmann.Shared.Networking.Messages.BlockPlacementMessage), 6 },
                { typeof(global::Bergmann.Shared.Networking.Messages.ChatMessage), 7 },
                { typeof(global::Bergmann.Shared.Networking.Messages.ChunkColumnRequestMessage), 8 },
                { typeof(global::Bergmann.Shared.Networking.Messages.ChunkUpdateMessage), 9 },
                { typeof(global::Bergmann.Shared.Networking.Messages.RawChunkMessage), 10 },
                { typeof(global::Bergmann.Shared.Networking.ServerMessageBox), 11 },
                { typeof(global::Bergmann.Shared.Objects.Block), 12 },
                { typeof(global::Bergmann.Shared.Objects.Chunk), 13 },
            };
        }

        internal static object GetFormatter(global::System.Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new global::MessagePack.Formatters.ValueTupleFormatter<global::OpenTK.Mathematics.Vector3i, global::Bergmann.Shared.Objects.Block>();
                case 1: return new global::MessagePack.Formatters.InterfaceListFormatter2<(global::OpenTK.Mathematics.Vector3i, global::Bergmann.Shared.Objects.Block)>();
                case 2: return new global::MessagePack.Formatters.ThreeDimensionalArrayFormatter<int>();
                case 3: return new Bergmann.Shared.Networking.Formatters.Bergmann.Shared.Networking.Messages.IMessageFormatter();
                case 4: return new Bergmann.Shared.Networking.Formatters.Bergmann.Shared.Networking.ClientMessageBoxFormatter();
                case 5: return new Bergmann.Shared.Networking.Formatters.Bergmann.Shared.Networking.Messages.BlockDestructionMessageFormatter();
                case 6: return new Bergmann.Shared.Networking.Formatters.Bergmann.Shared.Networking.Messages.BlockPlacementMessageFormatter();
                case 7: return new Bergmann.Shared.Networking.Formatters.Bergmann.Shared.Networking.Messages.ChatMessageFormatter();
                case 8: return new Bergmann.Shared.Networking.Formatters.Bergmann.Shared.Networking.Messages.ChunkColumnRequestMessageFormatter();
                case 9: return new Bergmann.Shared.Networking.Formatters.Bergmann.Shared.Networking.Messages.ChunkUpdateMessageFormatter();
                case 10: return new Bergmann.Shared.Networking.Formatters.Bergmann.Shared.Networking.Messages.RawChunkMessageFormatter();
                case 11: return new Bergmann.Shared.Networking.Formatters.Bergmann.Shared.Networking.ServerMessageBoxFormatter();
                case 12: return new Bergmann.Shared.Networking.Formatters.Bergmann.Shared.Objects.BlockFormatter();
                case 13: return new Bergmann.Shared.Networking.Formatters.Bergmann.Shared.Objects.ChunkFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1649 // File name should match first type name



// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace Bergmann.Shared.Networking.Formatters.Bergmann.Shared.Networking.Messages
{
    public sealed class IMessageFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Bergmann.Shared.Networking.Messages.IMessage>
    {
        private readonly global::System.Collections.Generic.Dictionary<global::System.RuntimeTypeHandle, global::System.Collections.Generic.KeyValuePair<int, int>> typeToKeyAndJumpMap;
        private readonly global::System.Collections.Generic.Dictionary<int, int> keyToJumpMap;

        public IMessageFormatter()
        {
            this.typeToKeyAndJumpMap = new global::System.Collections.Generic.Dictionary<global::System.RuntimeTypeHandle, global::System.Collections.Generic.KeyValuePair<int, int>>(6, global::MessagePack.Internal.RuntimeTypeHandleEqualityComparer.Default)
            {
                { typeof(global::Bergmann.Shared.Networking.Messages.ChatMessage).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(0, 0) },
                { typeof(global::Bergmann.Shared.Networking.Messages.ChunkColumnRequestMessage).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(1, 1) },
                { typeof(global::Bergmann.Shared.Networking.Messages.BlockPlacementMessage).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(2, 2) },
                { typeof(global::Bergmann.Shared.Networking.Messages.BlockDestructionMessage).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(3, 3) },
                { typeof(global::Bergmann.Shared.Networking.Messages.RawChunkMessage).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(4, 4) },
                { typeof(global::Bergmann.Shared.Networking.Messages.ChunkUpdateMessage).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(5, 5) },
            };
            this.keyToJumpMap = new global::System.Collections.Generic.Dictionary<int, int>(6)
            {
                { 0, 0 },
                { 1, 1 },
                { 2, 2 },
                { 3, 3 },
                { 4, 4 },
                { 5, 5 },
            };
        }

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Bergmann.Shared.Networking.Messages.IMessage value, global::MessagePack.MessagePackSerializerOptions options)
        {
            global::System.Collections.Generic.KeyValuePair<int, int> keyValuePair;
            if (value != null && this.typeToKeyAndJumpMap.TryGetValue(value.GetType().TypeHandle, out keyValuePair))
            {
                writer.WriteArrayHeader(2);
                writer.WriteInt32(keyValuePair.Key);
                switch (keyValuePair.Value)
                {
                    case 0:
                        options.Resolver.GetFormatterWithVerify<global::Bergmann.Shared.Networking.Messages.ChatMessage>().Serialize(ref writer, (global::Bergmann.Shared.Networking.Messages.ChatMessage)value, options);
                        break;
                    case 1:
                        options.Resolver.GetFormatterWithVerify<global::Bergmann.Shared.Networking.Messages.ChunkColumnRequestMessage>().Serialize(ref writer, (global::Bergmann.Shared.Networking.Messages.ChunkColumnRequestMessage)value, options);
                        break;
                    case 2:
                        options.Resolver.GetFormatterWithVerify<global::Bergmann.Shared.Networking.Messages.BlockPlacementMessage>().Serialize(ref writer, (global::Bergmann.Shared.Networking.Messages.BlockPlacementMessage)value, options);
                        break;
                    case 3:
                        options.Resolver.GetFormatterWithVerify<global::Bergmann.Shared.Networking.Messages.BlockDestructionMessage>().Serialize(ref writer, (global::Bergmann.Shared.Networking.Messages.BlockDestructionMessage)value, options);
                        break;
                    case 4:
                        options.Resolver.GetFormatterWithVerify<global::Bergmann.Shared.Networking.Messages.RawChunkMessage>().Serialize(ref writer, (global::Bergmann.Shared.Networking.Messages.RawChunkMessage)value, options);
                        break;
                    case 5:
                        options.Resolver.GetFormatterWithVerify<global::Bergmann.Shared.Networking.Messages.ChunkUpdateMessage>().Serialize(ref writer, (global::Bergmann.Shared.Networking.Messages.ChunkUpdateMessage)value, options);
                        break;
                    default:
                        break;
                }

                return;
            }

            writer.WriteNil();
        }

        public global::Bergmann.Shared.Networking.Messages.IMessage Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            if (reader.ReadArrayHeader() != 2)
            {
                throw new global::System.InvalidOperationException("Invalid Union data was detected. Type:global::Bergmann.Shared.Networking.Messages.IMessage");
            }

            options.Security.DepthStep(ref reader);
            var key = reader.ReadInt32();

            if (!this.keyToJumpMap.TryGetValue(key, out key))
            {
                key = -1;
            }

            global::Bergmann.Shared.Networking.Messages.IMessage result = null;
            switch (key)
            {
                case 0:
                    result = (global::Bergmann.Shared.Networking.Messages.IMessage)options.Resolver.GetFormatterWithVerify<global::Bergmann.Shared.Networking.Messages.ChatMessage>().Deserialize(ref reader, options);
                    break;
                case 1:
                    result = (global::Bergmann.Shared.Networking.Messages.IMessage)options.Resolver.GetFormatterWithVerify<global::Bergmann.Shared.Networking.Messages.ChunkColumnRequestMessage>().Deserialize(ref reader, options);
                    break;
                case 2:
                    result = (global::Bergmann.Shared.Networking.Messages.IMessage)options.Resolver.GetFormatterWithVerify<global::Bergmann.Shared.Networking.Messages.BlockPlacementMessage>().Deserialize(ref reader, options);
                    break;
                case 3:
                    result = (global::Bergmann.Shared.Networking.Messages.IMessage)options.Resolver.GetFormatterWithVerify<global::Bergmann.Shared.Networking.Messages.BlockDestructionMessage>().Deserialize(ref reader, options);
                    break;
                case 4:
                    result = (global::Bergmann.Shared.Networking.Messages.IMessage)options.Resolver.GetFormatterWithVerify<global::Bergmann.Shared.Networking.Messages.RawChunkMessage>().Deserialize(ref reader, options);
                    break;
                case 5:
                    result = (global::Bergmann.Shared.Networking.Messages.IMessage)options.Resolver.GetFormatterWithVerify<global::Bergmann.Shared.Networking.Messages.ChunkUpdateMessage>().Deserialize(ref reader, options);
                    break;
                default:
                    reader.Skip();
                    break;
            }

            reader.Depth--;
            return result;
        }
    }


}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace Bergmann.Shared.Networking.Formatters.Bergmann.Shared.Networking
{
    public sealed class ClientMessageBoxFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Bergmann.Shared.Networking.ClientMessageBox>
    {
        // Message
        private static global::System.ReadOnlySpan<byte> GetSpan_Message() => new byte[1 + 7] { 167, 77, 101, 115, 115, 97, 103, 101 };
        // ConnectionId
        private static global::System.ReadOnlySpan<byte> GetSpan_ConnectionId() => new byte[1 + 12] { 172, 67, 111, 110, 110, 101, 99, 116, 105, 111, 110, 73, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Bergmann.Shared.Networking.ClientMessageBox value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_Message());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Bergmann.Shared.Networking.Messages.IMessage>(formatterResolver).Serialize(ref writer, value.Message, options);
            writer.WriteRaw(GetSpan_ConnectionId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.ConnectionId, options);
        }

        public global::Bergmann.Shared.Networking.ClientMessageBox Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Message__ = default(global::Bergmann.Shared.Networking.Messages.IMessage);
            var __ConnectionId__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 28542640894207309UL) { goto FAIL; }

                        __Message__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Bergmann.Shared.Networking.Messages.IMessage>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 12:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_ConnectionId().Slice(1))) { goto FAIL; }

                        __ConnectionId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            var ____result = new global::Bergmann.Shared.Networking.ClientMessageBox(__Message__, __ConnectionId__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ServerMessageBoxFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Bergmann.Shared.Networking.ServerMessageBox>
    {
        // Message
        private static global::System.ReadOnlySpan<byte> GetSpan_Message() => new byte[1 + 7] { 167, 77, 101, 115, 115, 97, 103, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Bergmann.Shared.Networking.ServerMessageBox value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_Message());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Bergmann.Shared.Networking.Messages.IMessage>(formatterResolver).Serialize(ref writer, value.Message, options);
        }

        public global::Bergmann.Shared.Networking.ServerMessageBox Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Message__ = default(global::Bergmann.Shared.Networking.Messages.IMessage);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 28542640894207309UL) { goto FAIL; }

                        __Message__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Bergmann.Shared.Networking.Messages.IMessage>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            var ____result = new global::Bergmann.Shared.Networking.ServerMessageBox(__Message__);
            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace Bergmann.Shared.Networking.Formatters.Bergmann.Shared.Networking.Messages
{
    public sealed class BlockDestructionMessageFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Bergmann.Shared.Networking.Messages.BlockDestructionMessage>
    {
        // Position
        private static global::System.ReadOnlySpan<byte> GetSpan_Position() => new byte[1 + 8] { 168, 80, 111, 115, 105, 116, 105, 111, 110 };
        // Forward
        private static global::System.ReadOnlySpan<byte> GetSpan_Forward() => new byte[1 + 7] { 167, 70, 111, 114, 119, 97, 114, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Bergmann.Shared.Networking.Messages.BlockDestructionMessage value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_Position());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::OpenTK.Mathematics.Vector3>(formatterResolver).Serialize(ref writer, value.Position, options);
            writer.WriteRaw(GetSpan_Forward());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::OpenTK.Mathematics.Vector3>(formatterResolver).Serialize(ref writer, value.Forward, options);
        }

        public global::Bergmann.Shared.Networking.Messages.BlockDestructionMessage Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Position__ = default(global::OpenTK.Mathematics.Vector3);
            var __Forward__ = default(global::OpenTK.Mathematics.Vector3);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7957695015293251408UL) { goto FAIL; }

                        __Position__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::OpenTK.Mathematics.Vector3>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 28273260612448070UL) { goto FAIL; }

                        __Forward__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::OpenTK.Mathematics.Vector3>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            var ____result = new global::Bergmann.Shared.Networking.Messages.BlockDestructionMessage(__Position__, __Forward__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class BlockPlacementMessageFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Bergmann.Shared.Networking.Messages.BlockPlacementMessage>
    {
        // Position
        private static global::System.ReadOnlySpan<byte> GetSpan_Position() => new byte[1 + 8] { 168, 80, 111, 115, 105, 116, 105, 111, 110 };
        // Forward
        private static global::System.ReadOnlySpan<byte> GetSpan_Forward() => new byte[1 + 7] { 167, 70, 111, 114, 119, 97, 114, 100 };
        // BlockToPlace
        private static global::System.ReadOnlySpan<byte> GetSpan_BlockToPlace() => new byte[1 + 12] { 172, 66, 108, 111, 99, 107, 84, 111, 80, 108, 97, 99, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Bergmann.Shared.Networking.Messages.BlockPlacementMessage value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_Position());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::OpenTK.Mathematics.Vector3>(formatterResolver).Serialize(ref writer, value.Position, options);
            writer.WriteRaw(GetSpan_Forward());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::OpenTK.Mathematics.Vector3>(formatterResolver).Serialize(ref writer, value.Forward, options);
            writer.WriteRaw(GetSpan_BlockToPlace());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Bergmann.Shared.Objects.Block>(formatterResolver).Serialize(ref writer, value.BlockToPlace, options);
        }

        public global::Bergmann.Shared.Networking.Messages.BlockPlacementMessage Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Position__ = default(global::OpenTK.Mathematics.Vector3);
            var __Forward__ = default(global::OpenTK.Mathematics.Vector3);
            var __BlockToPlace__ = default(global::Bergmann.Shared.Objects.Block);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7957695015293251408UL) { goto FAIL; }

                        __Position__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::OpenTK.Mathematics.Vector3>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 28273260612448070UL) { goto FAIL; }

                        __Forward__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::OpenTK.Mathematics.Vector3>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 12:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_BlockToPlace().Slice(1))) { goto FAIL; }

                        __BlockToPlace__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Bergmann.Shared.Objects.Block>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            var ____result = new global::Bergmann.Shared.Networking.Messages.BlockPlacementMessage(__Position__, __Forward__, __BlockToPlace__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ChatMessageFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Bergmann.Shared.Networking.Messages.ChatMessage>
    {
        // Sender
        private static global::System.ReadOnlySpan<byte> GetSpan_Sender() => new byte[1 + 6] { 166, 83, 101, 110, 100, 101, 114 };
        // Text
        private static global::System.ReadOnlySpan<byte> GetSpan_Text() => new byte[1 + 4] { 164, 84, 101, 120, 116 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Bergmann.Shared.Networking.Messages.ChatMessage value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_Sender());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Sender, options);
            writer.WriteRaw(GetSpan_Text());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Text, options);
        }

        public global::Bergmann.Shared.Networking.Messages.ChatMessage Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Sender__ = default(string);
            var __Text__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 125779802219859UL) { goto FAIL; }

                        __Sender__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1954047316UL) { goto FAIL; }

                        __Text__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            var ____result = new global::Bergmann.Shared.Networking.Messages.ChatMessage(__Sender__, __Text__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ChunkColumnRequestMessageFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Bergmann.Shared.Networking.Messages.ChunkColumnRequestMessage>
    {
        // Key
        private static global::System.ReadOnlySpan<byte> GetSpan_Key() => new byte[1 + 3] { 163, 75, 101, 121 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Bergmann.Shared.Networking.Messages.ChunkColumnRequestMessage value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_Key());
            writer.Write(value.Key);
        }

        public global::Bergmann.Shared.Networking.Messages.ChunkColumnRequestMessage Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadMapHeader();
            var __Key__ = default(long);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 3:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7955787UL) { goto FAIL; }

                        __Key__ = reader.ReadInt64();
                        continue;

                }
            }

            var ____result = new global::Bergmann.Shared.Networking.Messages.ChunkColumnRequestMessage(__Key__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ChunkUpdateMessageFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Bergmann.Shared.Networking.Messages.ChunkUpdateMessage>
    {
        // Key
        private static global::System.ReadOnlySpan<byte> GetSpan_Key() => new byte[1 + 3] { 163, 75, 101, 121 };
        // UpdatedBlocks
        private static global::System.ReadOnlySpan<byte> GetSpan_UpdatedBlocks() => new byte[1 + 13] { 173, 85, 112, 100, 97, 116, 101, 100, 66, 108, 111, 99, 107, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Bergmann.Shared.Networking.Messages.ChunkUpdateMessage value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_Key());
            writer.Write(value.Key);
            writer.WriteRaw(GetSpan_UpdatedBlocks());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.IList<(global::OpenTK.Mathematics.Vector3i, global::Bergmann.Shared.Objects.Block)>>(formatterResolver).Serialize(ref writer, value.UpdatedBlocks, options);
        }

        public global::Bergmann.Shared.Networking.Messages.ChunkUpdateMessage Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Key__ = default(long);
            var __UpdatedBlocks__ = default(global::System.Collections.Generic.IList<(global::OpenTK.Mathematics.Vector3i, global::Bergmann.Shared.Objects.Block)>);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 3:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7955787UL) { goto FAIL; }

                        __Key__ = reader.ReadInt64();
                        continue;
                    case 13:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_UpdatedBlocks().Slice(1))) { goto FAIL; }

                        __UpdatedBlocks__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.IList<(global::OpenTK.Mathematics.Vector3i, global::Bergmann.Shared.Objects.Block)>>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            var ____result = new global::Bergmann.Shared.Networking.Messages.ChunkUpdateMessage(__Key__, __UpdatedBlocks__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RawChunkMessageFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Bergmann.Shared.Networking.Messages.RawChunkMessage>
    {
        // Chunk
        private static global::System.ReadOnlySpan<byte> GetSpan_Chunk() => new byte[1 + 5] { 165, 67, 104, 117, 110, 107 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Bergmann.Shared.Networking.Messages.RawChunkMessage value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_Chunk());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Bergmann.Shared.Objects.Chunk>(formatterResolver).Serialize(ref writer, value.Chunk, options);
        }

        public global::Bergmann.Shared.Networking.Messages.RawChunkMessage Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Chunk__ = default(global::Bergmann.Shared.Objects.Chunk);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 461414688835UL) { goto FAIL; }

                        __Chunk__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Bergmann.Shared.Objects.Chunk>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            var ____result = new global::Bergmann.Shared.Networking.Messages.RawChunkMessage(__Chunk__);
            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace Bergmann.Shared.Networking.Formatters.Bergmann.Shared.Objects
{
    public sealed class BlockFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Bergmann.Shared.Objects.Block>
    {
        // Type
        private static global::System.ReadOnlySpan<byte> GetSpan_Type() => new byte[1 + 4] { 164, 84, 121, 112, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Bergmann.Shared.Objects.Block value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_Type());
            writer.Write(value.Type);
        }

        public global::Bergmann.Shared.Objects.Block Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadMapHeader();
            var __Type__ = default(int);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701869908UL) { goto FAIL; }

                        __Type__ = reader.ReadInt32();
                        continue;

                }
            }

            var ____result = new global::Bergmann.Shared.Objects.Block(__Type__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ChunkFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Bergmann.Shared.Objects.Chunk>
    {
        // Blocks
        private static global::System.ReadOnlySpan<byte> GetSpan_Blocks() => new byte[1 + 6] { 166, 66, 108, 111, 99, 107, 115 };
        // Key
        private static global::System.ReadOnlySpan<byte> GetSpan_Key() => new byte[1 + 3] { 163, 75, 101, 121 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Bergmann.Shared.Objects.Chunk value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_Blocks());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<int[,,]>(formatterResolver).Serialize(ref writer, value.Blocks, options);
            writer.WriteRaw(GetSpan_Key());
            writer.Write(value.Key);
        }

        public global::Bergmann.Shared.Objects.Chunk Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Bergmann.Shared.Objects.Chunk();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 126905066941506UL) { goto FAIL; }

                        ____result.Blocks = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<int[,,]>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 3:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7955787UL) { goto FAIL; }

                        ____result.Key = reader.ReadInt64();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

